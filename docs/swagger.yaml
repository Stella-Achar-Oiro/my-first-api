openapi: 3.0.0
info:
  title: Todo API
  description: A RESTful API for managing todo items
  version: 1.0.0
  contact:
    name: Your Name
    email: your.email@example.com

servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Health
    description: Health check endpoints
  - name: Todos
    description: Todo management endpoints
  - name: Search
    description: Search functionality

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the status of the API
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  time:
                    type: string
                    format: date-time

  /todo:
    get:
      tags:
        - Todos
      summary: Get all todos
      description: Retrieves all todo items
      responses:
        '200':
          description: List of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    
    post:
      tags:
        - Todos
      summary: Create a new todo
      description: Creates a new todo item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Todo created successfully"
                  task:
                    type: string
                    example: "Complete project"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Todo already exists

    delete:
      tags:
        - Todos
      summary: Delete a todo
      description: Deletes an existing todo item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item:
                  type: string
                  example: "Complete project"
      responses:
        '200':
          description: Todo deleted successfully
        '404':
          description: Todo not found

  /todo/status:
    put:
      tags:
        - Todos
      summary: Update todo status
      description: Updates the status of an existing todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item:
                  type: string
                  example: "Complete project"
                status:
                  type: string
                  enum: [TO_BE_STARTED, IN_PROGRESS, COMPLETED]
      responses:
        '200':
          description: Status updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Todo not found

  /todo/priority/{priority}:
    get:
      tags:
        - Todos
      summary: Get todos by priority
      description: Retrieves todos filtered by priority level
      parameters:
        - name: priority
          in: path
          required: true
          schema:
            type: string
            enum: [low, medium, high]
      responses:
        '200':
          description: List of todos with specified priority
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'

  /search:
    get:
      tags:
        - Search
      summary: Search todos
      description: Searches todos based on a query string
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: string
          example: "1"
        task:
          type: string
          example: "Complete project"
        status:
          type: string
          enum: [TO_BE_STARTED, IN_PROGRESS, COMPLETED]
        priority:
          type: string
          enum: [low, medium, high]
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    TodoInput:
      type: object
      required:
        - task
      properties:
        task:
          type: string
          minLength: 3
          maxLength: 100
          example: "Complete project"
        priority:
          type: string
          enum: [low, medium, high]
          default: medium
        dueDate:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid request payload"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer